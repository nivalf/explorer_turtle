<launch>
    <!-- Arguments -->
    <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
    <arg name="slam_methods" default="gmapping" doc="slam type [gmapping, cartographer, hector, karto, frontier_exploration]"/>
    <arg name="configuration_basename" default="turtlebot3_lds_2d.lua"/>
    <arg name="open_rviz" default="true"/>

    <!-- Additional Arguments -->
    <arg name="explore_space" default="open"/>

    <!-- Turtlebot3 Bringup -->
    <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch">
    <arg name="model" value="$(arg model)" />
    </include>

    <!-- SLAM: Gmapping, Cartographer, Hector, Karto, Frontier_exploration, RTAB-Map -->
    <include file="$(find turtlebot3_slam)/launch/turtlebot3_$(arg slam_methods).launch">
        <arg name="model" value="$(arg model)"/>
        <arg name="configuration_basename" value="$(arg configuration_basename)"/>
    </include>

    <!-- rviz -->
    <group if="$(arg open_rviz)"> 
        <node pkg="rviz" type="rviz" name="rviz" required="true"
            args="-d $(find obstacle_avoider)/rviz/explorer.rviz"/>
    </group>

    <!-- Demo arena Gazebo -->
    <include file="$(find acs6121)/launch/arena.launch" />

    <!-- Search server -->
    <node pkg="obstacle_avoider" type="search_server.py" name="search_server" output="screen"/>
    <!-- Reverse Search server -->
    <node pkg="obstacle_avoider" type="reverse_search_server.py" name="reverse_search_server" output="screen"/>
    <!-- Find free space server -->
    <node pkg="obstacle_avoider" type="find_free_space_server.py" name="find_free_space_server" output="screen">
        <param name="explore_space" value="$(arg explore_space)" />
    </node>
    <!-- Explorer client -->
    <node pkg="obstacle_avoider" type="explorer_client.py" name="explorer_client" output="screen"/>
    <!-- Path Publisher -->
    <node pkg="obstacle_avoider" type="path_publisher.py" name="path_publisher" output="screen"/>
  
</launch>